module main

import os
import time
import bass
import divalib.pv
import divalib.dsc

const diva_root = '/mnt/Second/Games/PDAFT/SBZV_7.01'

pub enum DSCEventEnum {
	music
	lyric
	object
}

pub struct DSCEvent {
pub mut:
	at_time f64
	event   DSCEventEnum
	data    []f64
}

pub struct DSCVM {
mut:
	events []DSCEvent
pub mut:
	entry  &pv.DBEntry
	script &dsc.DSCParser
}

pub fn (mut dsc_emulator DSCVM) evaluate() {
	// Emulate game logic super quickly, to get the right timing and all.
	mut current_line := 0
	mut current_time := f64(0.0)
	mut current_offset := f64(1000.0)
	// mut current_bpm := 0
	// mut current_tft := 0 // current target flying time

	for current_line < dsc_emulator.script.commands.len {
		current_opcode := dsc_emulator.script.commands[current_line]

		match current_opcode.action {
			'TIME' { // 0x01
				current_time = dsc.DSCParser.diva_time_to_standard_milliseconds(current_opcode.arguments[0])
			}
			'LYRIC' { // 0x18
				dsc_emulator.events << DSCEvent{
					at_time: current_time
					event:   DSCEventEnum.lyric
					data:    [f64(current_opcode.arguments[0])]
				}
			}
			'MUSIC_PLAY' {
				dsc_emulator.events << DSCEvent{
					at_time: current_time
					event:   DSCEventEnum.music
					data:    [current_time]
				}
			}
			'TARGET' { // 0x06
				dsc_emulator.events << DSCEvent{
					at_time: current_time + current_offset
					event:   DSCEventEnum.object
				}
			}
			'BAR_TIME_SET' {
				current_offset = f64(current_opcode.arguments[0]) * 4.0
			}
			'TARGET_FLYING_TIME' {
				current_offset = f64(current_opcode.arguments[0])
			}
			else {}
		}

		current_line++
	}

	dsc_emulator.events.sort(a.at_time < b.at_time)
}

pub fn (mut dsc_emulator DSCVM) run() {
	dsc_emulator.evaluate()
	bass.start()

	offset := 0

	audio_path := os.join_path(diva_root, dsc_emulator.entry.song.audio_path)

	println('> Audio Path: ${audio_path}')
	println('> Commands: ${dsc_emulator.script.commands.len}')

	mut track := bass.new_track(audio_path)
	track.set_volume(0.5)
	track.set_position(offset)
	track.play()

	mut hit := bass.new_sample('${@VMODROOT}/assets/sfx/hit.wav')
	hit.set_volume(0.5)

	for {
		for i := 0; i < dsc_emulator.events.len; i++ {
			if track.get_position() - offset >= dsc_emulator.events[i].at_time {
				match dsc_emulator.events[i].event {
					.lyric {
						println('Lyric: ${dsc_emulator.entry.song.lyrics[int(dsc_emulator.events[i].data[0])]}')
					}
					.object {
						hit.play()
					}
					else {}
				}

				dsc_emulator.events = dsc_emulator.events[1..]
				i--
			}
		}

		time.sleep(8 * time.millisecond)
	}
}

fn main() {
	mut db := pv.DBParser.from_pvdb(os.join_path(diva_root, 'rom/pv_db.txt'))!
	mut spica := db.entries[261]

	hard_diff_script_path := os.join_path(diva_root, spica.difficulties['hard_0'].script.path)
	mut script_parser := dsc.DSCParser.from_file(hard_diff_script_path)!

	mut game_loop := DSCVM{
		entry:  &spica
		script: &script_parser
	}

	game_loop.run()
}
